<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_volume_control_1_1_update_utility_1_1_user32" kind="class" language="C#" prot="public">
    <compoundname>VolumeControl::UpdateUtility::User32</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392" prot="public" static="no" strong="yes">
        <type>int</type>
        <name>ECmdShow</name>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392a48ece36e3dbd0c5542936470840244ab" prot="public">
          <name>SW_HIDE</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Hides the window and activates another window. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392af20f2435c0d3f5e773106c5efb7b754e" prot="public">
          <name>SW_SHOWNORMAL</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392abe727d86fa041bdb6b3b57c6778f275d" prot="public">
          <name>SW_SHOWMINIMIZED</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Activates the window and displays it as a minimized window. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392a79eb62d551aa6abe660a3f0bb6ab45ef" prot="public">
          <name>SW_SHOWMAXIMIZED</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Activates the window and displays it as a maximized window. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392a371ac661639b38d5a62662750fb25fb3" prot="public">
          <name>SW_SHOWNOACTIVATE</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Displays a window in its most recent size and position. This value is similar to SW_SHOWNORMAL, except that the window is not activated. </para>
          </briefdescription>
          <detaileddescription>
<para>This is especially useful </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392ae92714f08066ab5550c943762f093bef" prot="public">
          <name>SW_SHOW</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>Activates the window and displays it in its current size and position. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392aaae64f2388e4827f2e2607d7ccb313e4" prot="public">
          <name>SW_MINIMIZE</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>Minimizes the specified window and activates the next top-level window in the Z order. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392a4edc6308c1e732dc6058389611c33caa" prot="public">
          <name>SW_SHOWMINNOACTIVE</name>
          <initializer>= 7</initializer>
          <briefdescription>
<para>Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392aa0c918cedd55d5e130440930050d1aed" prot="public">
          <name>SW_SHOWNA</name>
          <initializer>= 8</initializer>
          <briefdescription>
<para>Displays the window in its current size and position. This value is similar to SW_SHOW, except that the window is not activated. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392afc831fd7282824bee554b8c32c5a30a7" prot="public">
          <name>SW_RESTORE</name>
          <initializer>= 9</initializer>
          <briefdescription>
<para>Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392a824c16f26d24c0f2caeb55dc31034b60" prot="public">
          <name>SW_SHOWDEFAULT</name>
          <initializer>= 10</initializer>
          <briefdescription>
<para>Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392a61134a76adfae295de108a1f6a90cecc" prot="public">
          <name>SW_FORCEMINIMIZE</name>
          <initializer>= 11</initializer>
          <briefdescription>
<para>Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Modes that define how a window shown by calling <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1a899671ba7114c0338b63b83f63331aa4" kindref="member">ShowWindow(IntPtr, int)</ref> acts.<linebreak/>
 This should be passed as the <bold>nCmdShow</bold> parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>You can use <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1a279b0a6b132eb9fb2d250c0ed2fddfc4" kindref="member">ShowWindow(IntPtr, ECmdShow)</ref> as an alias for converting the enum value to an integer.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="85" column="15" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" bodystart="86" bodyend="136"/>
      </memberdef>
      <memberdef kind="enum" id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294" prot="public" static="no" strong="yes">
        <type>uint</type>
        <name>EUFlags</name>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294a1441cd9e05a4faa578e5813c99280287" prot="public">
          <name>SWP_ASYNCWINDOWPOS</name>
          <initializer>= 0x4000</initializer>
          <briefdescription>
<para>If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294ad86601b12bda86de6d4c8a3ef8bf2508" prot="public">
          <name>SWP_DEFERERASE</name>
          <initializer>= 0x2000</initializer>
          <briefdescription>
<para>Prevents generation of the WM_SYNCPAINT message. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294af7c70a75f1fd305d25ab55235ac8ca85" prot="public">
          <name>SWP_DRAWFRAME</name>
          <initializer>= 0x0020</initializer>
          <briefdescription>
<para>Draws a frame (defined in the window&apos;s class description) around the window. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294af5f88ebc0062bbc955e3b923f45133ce" prot="public">
          <name>SWP_FRAMECHANGED</name>
          <initializer>= 0x0020</initializer>
          <briefdescription>
<para>Applies new frame styles set using the SetWindowLong function.Sends a WM_NCCALCSIZE message to the window, even if the window&apos;s size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window&apos;s size is being changed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294a36cc99129d99f0e807cc914a4a859244" prot="public">
          <name>SWP_HIDEWINDOW</name>
          <initializer>= 0x0080</initializer>
          <briefdescription>
<para>Hides the window. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294a7f0dc9a789ea9dc95d115d36cf6509c6" prot="public">
          <name>SWP_NOACTIVATE</name>
          <initializer>= 0x0010</initializer>
          <briefdescription>
<para>Does not activate the window.If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294a1cae2949a7db695fb1221369d794f129" prot="public">
          <name>SWP_NOCOPYBITS</name>
          <initializer>= 0x0100</initializer>
          <briefdescription>
<para>Discards the entire contents of the client area.If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294a09e79078cf81469d49fa99d8399dc9ff" prot="public">
          <name>SWP_NOMOVE</name>
          <initializer>= 0x0002</initializer>
          <briefdescription>
<para>Retains the current position (ignores X and Y parameters). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294ae33b42b05be0db5c80e78134017b083b" prot="public">
          <name>SWP_NOOWNERZORDER</name>
          <initializer>= 0x0200</initializer>
          <briefdescription>
<para>Does not change the owner window&apos;s position in the Z order. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294abc589c40051a738c1e66ffc3833fc9b4" prot="public">
          <name>SWP_NOREDRAW</name>
          <initializer>= 0x0008</initializer>
          <briefdescription>
<para>Does not redraw changes.If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved.When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294a3bfb07817a44e3e26464d3637c3f5f56" prot="public">
          <name>SWP_NOREPOSITION</name>
          <initializer>= 0x0200</initializer>
          <briefdescription>
<para>Same as the SWP_NOOWNERZORDER flag. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294a1ee6113868a0d32c9df0bc50ba29aac1" prot="public">
          <name>SWP_NOSENDCHANGING</name>
          <initializer>= 0x0400</initializer>
          <briefdescription>
<para>Prevents the window from receiving the WM_WINDOWPOSCHANGING message. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294acfd43f3b8991777bbc5826394e19883b" prot="public">
          <name>SWP_NOSIZE</name>
          <initializer>= 0x0001</initializer>
          <briefdescription>
<para>Retains the current size (ignores the cx and cy parameters). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294a2d21b69c0ef5501dcdf12e5931a5f146" prot="public">
          <name>SWP_NOZORDER</name>
          <initializer>= 0x0004</initializer>
          <briefdescription>
<para>Retains the current Z order (ignores the hWndInsertAfter parameter). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294ad0bb93cdeef2be929d2d95322e40e4c7" prot="public">
          <name>SWP_SHOWWINDOW</name>
          <initializer>= 0x0040</initializer>
          <briefdescription>
<para>Displays the window. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible values to pass to the <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1ac24521a59e5879593557cd78b9e8c651" kindref="member">SetWindowPos(IntPtr, IntPtr, int, int, int, int, EUFlags)</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="159" column="15" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" bodystart="160" bodyend="221"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_volume_control_1_1_update_utility_1_1_user32_1ae0ffef13bc25d5dac5e7e75b1b466e87" prot="public" static="yes" mutable="no">
        <type>readonly IntPtr</type>
        <definition>readonly IntPtr VolumeControl.UpdateUtility.User32.HWND_BOTTOM</definition>
        <argsstring></argsstring>
        <name>HWND_BOTTOM</name>
        <initializer>= new(1)</initializer>
        <briefdescription>
<para>Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="141" column="39" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_volume_control_1_1_update_utility_1_1_user32_1aff2d0cdbfee9f62329207cc8cf44103e" prot="public" static="yes" mutable="no">
        <type>readonly IntPtr</type>
        <definition>readonly IntPtr VolumeControl.UpdateUtility.User32.HWND_NOTOPMOST</definition>
        <argsstring></argsstring>
        <name>HWND_NOTOPMOST</name>
        <initializer>= new(-2)</initializer>
        <briefdescription>
<para>Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="145" column="39" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_volume_control_1_1_update_utility_1_1_user32_1a181c8ee8c5997565133549b0f5a04c02" prot="public" static="yes" mutable="no">
        <type>readonly IntPtr</type>
        <definition>readonly IntPtr VolumeControl.UpdateUtility.User32.HWND_TOP</definition>
        <argsstring></argsstring>
        <name>HWND_TOP</name>
        <initializer>= new(0)</initializer>
        <briefdescription>
<para>Places the window at the top of the Z order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="149" column="39" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_volume_control_1_1_update_utility_1_1_user32_1a42f4e16b9dfb9a48dc1ff21559491694" prot="public" static="yes" mutable="no">
        <type>readonly IntPtr</type>
        <definition>readonly IntPtr VolumeControl.UpdateUtility.User32.HWND_TOPMOST</definition>
        <argsstring></argsstring>
        <name>HWND_TOPMOST</name>
        <initializer>= new(-1)</initializer>
        <briefdescription>
<para>Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="153" column="39" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_volume_control_1_1_update_utility_1_1_user32_1a2464b0ae0793a9b57fbdc2a3410e5a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool VolumeControl.UpdateUtility.User32.SetWindowPos</definition>
        <argsstring>(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags)</argsstring>
        <name>SetWindowPos</name>
        <param>
          <type>IntPtr</type>
          <declname>hWnd</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>hWndInsertAfter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cy</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>uFlags</declname>
        </param>
        <briefdescription>
<para>Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hWnd</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the window.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hWndInsertAfter</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values. <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1ae0ffef13bc25d5dac5e7e75b1b466e87" kindref="member">HWND_BOTTOM</ref>, <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1aff2d0cdbfee9f62329207cc8cf44103e" kindref="member">HWND_NOTOPMOST</ref>, <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1a181c8ee8c5997565133549b0f5a04c02" kindref="member">HWND_TOP</ref>, or <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1a42f4e16b9dfb9a48dc1ff21559491694" kindref="member">HWND_TOPMOST</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The new position of the left side of the window, in client coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The new position of the top of the window, in client coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>The new width of the window, in pixels.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cy</parametername>
</parameternamelist>
<parameterdescription>
<para>The new height of the window, in pixels.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>The window sizing and positioning flags.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the function succeeds, the return value is nonzero.<linebreak/>
If the function fails, the return value is zero.To get extended error information, call GetLastError.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="22" column="35"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_update_utility_1_1_user32_1ab1558cf412593f8cf59bfc4ed5c7de42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool VolumeControl.UpdateUtility.User32.SetActiveWindow</definition>
        <argsstring>(IntPtr hWnd)</argsstring>
        <name>SetActiveWindow</name>
        <param>
          <type>IntPtr</type>
          <declname>hWnd</declname>
        </param>
        <briefdescription>
<para>Activates a window. The window must be attached to the calling thread&apos;s message queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hWnd</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the top-level window to be activated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
<para>The SetActiveWindow function activates a window, but not if the application is in the background. The window will be brought into the foreground (top of Z-Order) if its application is in the foreground when the system activates the window.<linebreak/>
 If the window identified by the hWnd parameter was created by the calling thread, the active window status of the calling thread is set to hWnd.Otherwise, the active window status of the calling thread is set to NULL. </para>
<para><simplesect kind="return"><para>If the function succeeds, the return value is the handle to the window that was previously active.<linebreak/>
If the function fails, the return value is NULL.To get extended error information, call GetLastError.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="45" column="35"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_update_utility_1_1_user32_1a899671ba7114c0338b63b83f63331aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool VolumeControl.UpdateUtility.User32.ShowWindow</definition>
        <argsstring>(IntPtr hWnd, int nCmdShow)</argsstring>
        <name>ShowWindow</name>
        <param>
          <type>IntPtr</type>
          <declname>hWnd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nCmdShow</declname>
        </param>
        <briefdescription>
<para>Sets the specified window&apos;s show state. </para>
        </briefdescription>
        <detaileddescription>
<para>To perform certain special effects when showing or hiding a window, use AnimateWindow. The first time an application calls ShowWindow, it should use the WinMain function&apos;s nCmdShow parameter as its nCmdShow parameter. Subsequent calls to ShowWindow must use one of the values in the given list, instead of the one specified by the WinMain function&apos;s nCmdShow parameter. As noted in the discussion of the nCmdShow parameter, the nCmdShow value is ignored in the first call to ShowWindow if the program that launched the application specifies startup information in the structure.In this case, ShowWindow uses the information specified in the STARTUPINFO structure to show the window.On subsequent calls, the application must call ShowWindow with nCmdShow set to SW_SHOWDEFAULT to use the startup information provided by the program that launched the application.This behavior is designed for the following situations: <itemizedlist>
<listitem>
<para>Applications create their main window by calling CreateWindow with the WS_VISIBLE flag set. </para>
</listitem>
<listitem>
<para>Applications create their main window by calling CreateWindow with the WS_VISIBLE flag cleared, and later call ShowWindow with the <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392ae92714f08066ab5550c943762f093bef" kindref="member">ECmdShow.SW_SHOW</ref> flag set to make it visible. </para>
</listitem>
</itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hWnd</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the window.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nCmdShow</parametername>
</parameternamelist>
<parameterdescription>
<para>Controls how the window is to be shown. This parameter is ignored the first time an application calls ShowWindow, if the program that launched the application provides a STARTUPINFO structure. Otherwise, the first time ShowWindow is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter. In subsequent calls, this parameter can be one of the following values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="2" cols="2"><row>
<entry thead="no"><para>true</para>
</entry><entry thead="no"><para>If the window was previously visible, the return value is nonzero. </para>
</entry></row>
<row>
<entry thead="no"><para>false</para>
</entry><entry thead="no"><para>If the window was previously hidden, the return value is zero. </para>
</entry></row>
</table>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="65" column="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_volume_control_1_1_update_utility_1_1_user32_1ac24521a59e5879593557cd78b9e8c651" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool VolumeControl.UpdateUtility.User32.SetWindowPos</definition>
        <argsstring>(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, EUFlags eFlags)</argsstring>
        <name>SetWindowPos</name>
        <param>
          <type>IntPtr</type>
          <declname>hWnd</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>hWndInsertAfter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cy</declname>
        </param>
        <param>
          <type><ref refid="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294" kindref="member">EUFlags</ref></type>
          <declname>eFlags</declname>
        </param>
        <briefdescription>
<para>Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hWnd</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the window.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hWndInsertAfter</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values. <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1ae0ffef13bc25d5dac5e7e75b1b466e87" kindref="member">HWND_BOTTOM</ref>, <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1aff2d0cdbfee9f62329207cc8cf44103e" kindref="member">HWND_NOTOPMOST</ref>, <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1a181c8ee8c5997565133549b0f5a04c02" kindref="member">HWND_TOP</ref>, or <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1a42f4e16b9dfb9a48dc1ff21559491694" kindref="member">HWND_TOPMOST</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The new position of the left side of the window, in client coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The new position of the top of the window, in client coordinates.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cx</parametername>
</parameternamelist>
<parameterdescription>
<para>The new width of the window, in pixels.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cy</parametername>
</parameternamelist>
<parameterdescription>
<para>The new height of the window, in pixels.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>The window sizing and positioning flags of type <ref refid="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294" kindref="member">EUFlags</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the function succeeds, the return value is nonzero.<linebreak/>
If the function fails, the return value is zero.To get extended error information, call GetLastError.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="34" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_update_utility_1_1_user32_1a279b0a6b132eb9fb2d250c0ed2fddfc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool VolumeControl.UpdateUtility.User32.ShowWindow</definition>
        <argsstring>(IntPtr hWnd, ECmdShow eCmdShow)</argsstring>
        <name>ShowWindow</name>
        <param>
          <type>IntPtr</type>
          <declname>hWnd</declname>
        </param>
        <param>
          <type><ref refid="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392" kindref="member">ECmdShow</ref></type>
          <declname>eCmdShow</declname>
        </param>
        <briefdescription>
<para>Sets the specified window&apos;s show state. </para>
        </briefdescription>
        <detaileddescription>
<para>The first time this function is called, the <emphasis>eCmdShow</emphasis>  parameter is ignored in order to initialize with <emphasis>hWnd</emphasis> .<linebreak/>
 In most cases, you can get this out of the way in the Form&apos;s constructor by calling: <programlisting><codeline><highlight class="normal">ShowWindow(&lt;paramref<sp/>name=&quot;hWnd&quot;/&gt;,<sp/>&lt;see<sp/>cref=&quot;ECmdShow.SW_HIDE&quot;/&gt;)</highlight></codeline>
</programlisting> </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hWnd</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the window.<linebreak/>
This can be acquired with: <programlisting><codeline><highlight class="normal">Form.Handle</highlight></codeline>
</programlisting></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eCmdShow</parametername>
</parameternamelist>
<parameterdescription>
<para>Controls how the window is to be shown.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><table rows="2" cols="2"><row>
<entry thead="no"><para>true</para>
</entry><entry thead="no"><para>If the window was previously visible, the return value is nonzero. </para>
</entry></row>
<row>
<entry thead="no"><para>false</para>
</entry><entry thead="no"><para>If the window was previously hidden, the return value is zero. </para>
</entry></row>
</table>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="79" column="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains various functions from user32.dll </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>VolumeControl.UpdateUtility.User32</label>
        <link refid="class_volume_control_1_1_update_utility_1_1_user32"/>
        <childnode refid="2" relation="usage">
          <edgelabel>HWND_BOTTOM</edgelabel>
          <edgelabel>HWND_NOTOPMOST</edgelabel>
          <edgelabel>HWND_TOP</edgelabel>
          <edgelabel>HWND_TOPMOST</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>static</label>
      </node>
    </collaborationgraph>
    <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" line="8" column="19" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.UpdateUtility/User32.cs" bodystart="9" bodyend="222"/>
    <listofallmembers>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1a7a4d6d1ec94a820984dd4c4a7ca55392" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>ECmdShow</name></member>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1aaee724d95dbb984c9e2e9e5f44ba7294" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>EUFlags</name></member>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1ae0ffef13bc25d5dac5e7e75b1b466e87" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>HWND_BOTTOM</name></member>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1aff2d0cdbfee9f62329207cc8cf44103e" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>HWND_NOTOPMOST</name></member>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1a181c8ee8c5997565133549b0f5a04c02" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>HWND_TOP</name></member>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1a42f4e16b9dfb9a48dc1ff21559491694" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>HWND_TOPMOST</name></member>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1ab1558cf412593f8cf59bfc4ed5c7de42" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>SetActiveWindow</name></member>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1a2464b0ae0793a9b57fbdc2a3410e5a74" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>SetWindowPos</name></member>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1ac24521a59e5879593557cd78b9e8c651" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>SetWindowPos</name></member>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1a899671ba7114c0338b63b83f63331aa4" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>ShowWindow</name></member>
      <member refid="class_volume_control_1_1_update_utility_1_1_user32_1a279b0a6b132eb9fb2d250c0ed2fddfc4" prot="public" virt="non-virtual"><scope>VolumeControl::UpdateUtility::User32</scope><name>ShowWindow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
