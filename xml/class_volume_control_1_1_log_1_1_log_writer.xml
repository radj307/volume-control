<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_volume_control_1_1_log_1_1_log_writer" kind="class" language="C#" prot="public">
    <compoundname>VolumeControl::Log::LogWriter</compoundname>
    <basecompoundref refid="interface_volume_control_1_1_log_1_1_interfaces_1_1_i_log_writer" prot="public" virt="non-virtual">VolumeControl.Log.Interfaces.ILogWriter</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">IDisposable</basecompoundref>
    <derivedcompoundref refid="class_volume_control_1_1_log_1_1_log_message" prot="public" virt="non-virtual">VolumeControl.Log.LogMessage</derivedcompoundref>
    <innerclass refid="struct_volume_control_1_1_log_1_1_log_writer_1_1_conditional_message" prot="public">VolumeControl::Log::LogWriter::ConditionalMessage</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_volume_control_1_1_log_1_1_log_writer_1a3251e29f0b5996a94eb8e509e9d0d5c9" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool VolumeControl.Log.LogWriter.disposedValue</definition>
        <argsstring></argsstring>
        <name>disposedValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="17" column="22" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_volume_control_1_1_log_1_1_log_writer_1a5ef26b1bf948c848e951921e8c2a5363" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type><ref refid="interface_volume_control_1_1_log_1_1_endpoints_1_1_i_endpoint" kindref="compound">IEndpoint</ref></type>
        <definition>IEndpoint VolumeControl.Log.LogWriter.Endpoint</definition>
        <argsstring></argsstring>
        <name>Endpoint</name>
        <briefdescription>
<para>Gets or sets the log endpoint object used for output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="34" column="26" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="34" bodyend="34"/>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a84f2a4a818ded391050345b3962adc90" compoundref="_log_writer_8cs" startline="275" endline="280">VolumeControl.Log.LogWriter.Append</referencedby>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1ad15ebefc27f412e93bb25a211100d2af" compoundref="_log_writer_8cs" startline="311" endline="322">VolumeControl.Log.LogWriter.Dispose</referencedby>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1aecfc7d86fb35f9bb5e0803755f0040c8" compoundref="_log_writer_8cs" startline="22" endline="27">VolumeControl.Log.LogWriter.LogWriter</referencedby>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1af9f117f9eb6d41820bc271ac0f0d4f76" compoundref="_log_writer_8cs" startline="181" endline="186">VolumeControl.Log.LogWriter.WriteEvent</referencedby>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a2358be752465f43b8ac7b0d7c2aa55bf" compoundref="_log_writer_8cs" startline="77" endline="116">VolumeControl.Log.LogWriter.WriteWithTimestamp</referencedby>
      </memberdef>
      <memberdef kind="property" id="class_volume_control_1_1_log_1_1_log_writer_1a9ccdde45c27eeb86a0be3d706c97a050" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type><ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref></type>
        <definition>EventType VolumeControl.Log.LogWriter.EventTypeFilter</definition>
        <argsstring></argsstring>
        <name>EventTypeFilter</name>
        <briefdescription>
<para>Gets or sets the bitfield filter for event types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="38" column="26" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="38" bodyend="38"/>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1aecfc7d86fb35f9bb5e0803755f0040c8" compoundref="_log_writer_8cs" startline="22" endline="27">VolumeControl.Log.LogWriter.LogWriter</referencedby>
      </memberdef>
      <memberdef kind="property" id="class_volume_control_1_1_log_1_1_log_writer_1a7a8311bdb049a796df8c60540a979ae6" prot="public" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="no" privatesettable="yes" protectedsettable="no">
        <type><ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref></type>
        <definition>EventType VolumeControl.Log.LogWriter.LastEventType</definition>
        <argsstring></argsstring>
        <name>LastEventType</name>
        <briefdescription>
<para>Gets the last type of event to be printed to the log. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="42" column="26" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="42" bodyend="42"/>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a21c94de59ea2f83f2c8ad36f6e6b1280" compoundref="_log_writer_8cs" startline="293" endline="297">VolumeControl.Log.LogWriter.FollowupIf</referencedby>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a50ad257b3de9e7d97078463bee977514">VolumeControl.Log.LogWriter.GetMessage</referencedby>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1aecfc7d86fb35f9bb5e0803755f0040c8" compoundref="_log_writer_8cs" startline="22" endline="27">VolumeControl.Log.LogWriter.LogWriter</referencedby>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1af9f117f9eb6d41820bc271ac0f0d4f76" compoundref="_log_writer_8cs" startline="181" endline="186">VolumeControl.Log.LogWriter.WriteEvent</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1aecfc7d86fb35f9bb5e0803755f0040c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VolumeControl.Log.LogWriter.LogWriter</definition>
        <argsstring>(IEndpoint endpoint, EventType eventTypeFilter)</argsstring>
        <name>LogWriter</name>
        <param>
          <type><ref refid="interface_volume_control_1_1_log_1_1_endpoints_1_1_i_endpoint" kindref="compound">IEndpoint</ref></type>
          <declname>endpoint</declname>
        </param>
        <param>
          <type><ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref></type>
          <declname>eventTypeFilter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>An endpoint to use.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eventTypeFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>An event type filter to use. This may be a combination of bitfield flags.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="22" column="16" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="22" bodyend="27"/>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a5ef26b1bf948c848e951921e8c2a5363" compoundref="_log_writer_8cs" startline="34" endline="34">VolumeControl.Log.LogWriter.Endpoint</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a9ccdde45c27eeb86a0be3d706c97a050" compoundref="_log_writer_8cs" startline="38" endline="38">VolumeControl.Log.LogWriter.EventTypeFilter</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a7a8311bdb049a796df8c60540a979ae6" compoundref="_log_writer_8cs" startline="42" endline="42">VolumeControl.Log.LogWriter.LastEventType</references>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a927e2b5b79ae2c3a0b243246bb2e5a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool VolumeControl.Log.LogWriter.FilterEventType</definition>
        <argsstring>(EventType eventType)</argsstring>
        <name>FilterEventType</name>
        <reimplements refid="interface_volume_control_1_1_log_1_1_interfaces_1_1_i_log_writer_1acd8d92c934af1a6645069ecf9616a389">FilterEventType</reimplements>
        <param>
          <type><ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref></type>
          <declname>eventType</declname>
        </param>
        <briefdescription>
<para><para>Determines whether the given EventType should be written to the <ref refid="interface_volume_control_1_1_log_1_1_interfaces_1_1_i_log_writer_1accbd1aa41b70c24192c9566be3863fee" kindref="member">Endpoint</ref> or not.</para>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="44" column="21"/>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a23589efc4aa886f386e9d8645338a395" compoundref="_log_writer_8cs" startline="149" endline="160">VolumeControl.Log.LogWriter.Conditional</referencedby>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1af9f117f9eb6d41820bc271ac0f0d4f76" compoundref="_log_writer_8cs" startline="181" endline="186">VolumeControl.Log.LogWriter.WriteEvent</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1ac1a570a8d00bacba3a71dd8e442cfd31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interface_volume_control_1_1_log_1_1_interfaces_1_1_i_timestamp" kindref="compound">ITimestamp</ref></type>
        <definition>ITimestamp VolumeControl.Log.LogWriter.MakeTimestamp</definition>
        <argsstring>(EventType eventType)</argsstring>
        <name>MakeTimestamp</name>
        <reimplements refid="interface_volume_control_1_1_log_1_1_interfaces_1_1_i_log_writer_1a423b396eec8b2c8d57881414daae8f86">MakeTimestamp</reimplements>
        <param>
          <type><ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref></type>
          <declname>eventType</declname>
        </param>
        <briefdescription>
<para><para>Gets a timestamp in the correct format for this log writer instance.</para>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="46" column="27"/>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1af9f117f9eb6d41820bc271ac0f0d4f76" compoundref="_log_writer_8cs" startline="181" endline="186">VolumeControl.Log.LogWriter.WriteEvent</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a06ef763c23a68f61dbd347e76098c151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.Write</definition>
        <argsstring>(object text)</argsstring>
        <name>Write</name>
        <param>
          <type>object</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Writes some text to the log file. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this method is very inefficient as it re-creates a StreamWriter each time; see the obsoletion warning.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to write.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="58" column="21"/>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a1945fc8f37b7d1b0b156693cd616ffb7" compoundref="_log_writer_8cs" startline="165" endline="175">VolumeControl.Log.LogWriter.WriteMessage</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1adcd0a07adf8acc7d797d10cbae69a11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.WriteLine</definition>
        <argsstring>(object? line=null)</argsstring>
        <name>WriteLine</name>
        <param>
          <type>object?</type>
          <declname>line</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Writes a line to the log file. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this method is very inefficient as it re-creates a StreamWriter each time; see the obsoletion warning.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to write.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="63" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a50ad257b3de9e7d97078463bee977514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_volume_control_1_1_log_1_1_log_message" kindref="compound">LogMessage</ref></type>
        <definition>LogMessage VolumeControl.Log.LogWriter.GetMessage</definition>
        <argsstring>()</argsstring>
        <name>GetMessage</name>
        <briefdescription>
<para>Creates and returns a log message object using this log writer as a base. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="class_volume_control_1_1_log_1_1_log_message" kindref="compound">LogMessage</ref> class.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="70" column="27"/>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a7a8311bdb049a796df8c60540a979ae6" compoundref="_log_writer_8cs" startline="42" endline="42">VolumeControl.Log.LogWriter.LastEventType</references>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a2358be752465f43b8ac7b0d7c2aa55bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.WriteWithTimestamp</definition>
        <argsstring>(string ts, params object?[] lines)</argsstring>
        <name>WriteWithTimestamp</name>
        <param>
          <type>string</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Writes a log message with a given timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>The full timestamp as a string.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of lines of any object type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="77" column="21" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="77" bodyend="116"/>
        <references refid="interface_volume_control_1_1_log_1_1_endpoints_1_1_i_endpoint_1a6912d3851cf42b2017d164c08d073c8e" compoundref="_i_endpoint_8cs" startline="11" endline="11">VolumeControl.Log.Endpoints.IEndpoint.Enabled</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a5ef26b1bf948c848e951921e8c2a5363" compoundref="_log_writer_8cs" startline="34" endline="34">VolumeControl.Log.LogWriter.Endpoint</references>
        <references refid="interface_volume_control_1_1_log_1_1_endpoints_1_1_i_endpoint_1aff4d1758c814322b5474fa95c9863ce8">VolumeControl.Log.Endpoints.IEndpoint.GetWriter</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a41f1ff6d9d62eec9077a3c608ca36b5e">VolumeControl.Log.LogWriter.MakeBlankTimestamp</references>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a84f2a4a818ded391050345b3962adc90" compoundref="_log_writer_8cs" startline="275" endline="280">VolumeControl.Log.LogWriter.Append</referencedby>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1af9f117f9eb6d41820bc271ac0f0d4f76" compoundref="_log_writer_8cs" startline="181" endline="186">VolumeControl.Log.LogWriter.WriteEvent</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a817b4d25c9fcc86fa0b5afe28ec054b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.WriteWithTimestamp</definition>
        <argsstring>(ITimestamp ts, params object?[] lines)</argsstring>
        <name>WriteWithTimestamp</name>
        <param>
          <type><ref refid="interface_volume_control_1_1_log_1_1_interfaces_1_1_i_timestamp" kindref="compound">ITimestamp</ref></type>
          <declname>ts</declname>
        </param>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp object.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of lines of any object type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="120" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a23589efc4aa886f386e9d8645338a395" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.Conditional</definition>
        <argsstring>(params ConditionalMessage[] messages)</argsstring>
        <name>Conditional</name>
        <param>
          <type>params <ref refid="struct_volume_control_1_1_log_1_1_log_writer_1_1_conditional_message" kindref="compound">ConditionalMessage</ref>[]</type>
          <declname>messages</declname>
        </param>
        <briefdescription>
<para>Conditional log message, allows you to write different messages depending on the current log filter level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>messages</parametername>
</parameternamelist>
<parameterdescription>
<para>EventType-IEnumerable pairs. Only the message assoicated with the first pair whose event type is considered valid by <ref refid="class_volume_control_1_1_log_1_1_log_writer_1a927e2b5b79ae2c3a0b243246bb2e5a3d" kindref="member">FilterEventType(EventType)</ref> is printed.<linebreak/>
If none of the given event types are allowed, nothing happens.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="149" column="21" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="149" bodyend="160"/>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a927e2b5b79ae2c3a0b243246bb2e5a3d">VolumeControl.Log.LogWriter.FilterEventType</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1af9f117f9eb6d41820bc271ac0f0d4f76" compoundref="_log_writer_8cs" startline="181" endline="186">VolumeControl.Log.LogWriter.WriteEvent</references>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a1945fc8f37b7d1b0b156693cd616ffb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.WriteMessage</definition>
        <argsstring>(ILogWriter msg)</argsstring>
        <name>WriteMessage</name>
        <param>
          <type><ref refid="interface_volume_control_1_1_log_1_1_interfaces_1_1_i_log_writer" kindref="compound">ILogWriter</ref></type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Writes a <ref refid="class_volume_control_1_1_log_1_1_log_message" kindref="compound">LogMessage</ref> or similar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Any type that implements ILogWriter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="165" column="21" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="165" bodyend="175"/>
        <references refid="interface_volume_control_1_1_log_1_1_interfaces_1_1_i_log_writer_1accbd1aa41b70c24192c9566be3863fee" compoundref="_i_log_writer_8cs" startline="15" endline="15">VolumeControl.Log.Interfaces.ILogWriter.Endpoint</references>
        <references refid="interface_volume_control_1_1_log_1_1_endpoints_1_1_i_endpoint_1a60af0f9d41c722343efedc38320afe57">VolumeControl.Log.Endpoints.IEndpoint.GetReader</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a06ef763c23a68f61dbd347e76098c151">VolumeControl.Log.LogWriter.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1af9f117f9eb6d41820bc271ac0f0d4f76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.WriteEvent</definition>
        <argsstring>(EventType eventType, IEnumerable lines)</argsstring>
        <name>WriteEvent</name>
        <param>
          <type><ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref></type>
          <declname>eventType</declname>
        </param>
        <param>
          <type>IEnumerable</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Writes a log message with a timestamp and log level header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eventType</parametername>
</parameternamelist>
<parameterdescription>
<para>An event type. Do not provide combinations of event type flags!</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any enumerable type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="181" column="21" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="181" bodyend="186"/>
        <references refid="interface_volume_control_1_1_log_1_1_endpoints_1_1_i_endpoint_1a6912d3851cf42b2017d164c08d073c8e" compoundref="_i_endpoint_8cs" startline="11" endline="11">VolumeControl.Log.Endpoints.IEndpoint.Enabled</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a5ef26b1bf948c848e951921e8c2a5363" compoundref="_log_writer_8cs" startline="34" endline="34">VolumeControl.Log.LogWriter.Endpoint</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a927e2b5b79ae2c3a0b243246bb2e5a3d">VolumeControl.Log.LogWriter.FilterEventType</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a7a8311bdb049a796df8c60540a979ae6" compoundref="_log_writer_8cs" startline="42" endline="42">VolumeControl.Log.LogWriter.LastEventType</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1ac1a570a8d00bacba3a71dd8e442cfd31">VolumeControl.Log.LogWriter.MakeTimestamp</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a2358be752465f43b8ac7b0d7c2aa55bf" compoundref="_log_writer_8cs" startline="77" endline="116">VolumeControl.Log.LogWriter.WriteWithTimestamp</references>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a23589efc4aa886f386e9d8645338a395" compoundref="_log_writer_8cs" startline="149" endline="160">VolumeControl.Log.LogWriter.Conditional</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a07d713ad2ef057e4606c04bdd6169c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.WriteEvent</definition>
        <argsstring>((EventType, IEnumerable) pair)</argsstring>
        <name>WriteEvent</name>
        <param>
          <type>(<ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref>, IEnumerable)</type>
          <declname>pair</declname>
        </param>
        <briefdescription>
<para>Writes a log message with a timestamp and log level header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pair</parametername>
</parameternamelist>
<parameterdescription>
<para>An event type, and any enumerable type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="189" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a10efb093dfb522f97b14188ee6a3fa5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.WriteEvent</definition>
        <argsstring>(EventType eventType, object?[] lines)</argsstring>
        <name>WriteEvent</name>
        <param>
          <type><ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref></type>
          <declname>eventType</declname>
        </param>
        <param>
          <type>object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Writes a log message with a timestamp and log level header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eventType</parametername>
</parameternamelist>
<parameterdescription>
<para>An event type. Do not provide combinations of event type flags!</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any enumerable type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="193" column="21" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="193" bodyend="198"/>
        <references refid="interface_volume_control_1_1_log_1_1_endpoints_1_1_i_endpoint_1a6912d3851cf42b2017d164c08d073c8e" compoundref="_i_endpoint_8cs" startline="11" endline="11">VolumeControl.Log.Endpoints.IEndpoint.Enabled</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a5ef26b1bf948c848e951921e8c2a5363" compoundref="_log_writer_8cs" startline="34" endline="34">VolumeControl.Log.LogWriter.Endpoint</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a927e2b5b79ae2c3a0b243246bb2e5a3d">VolumeControl.Log.LogWriter.FilterEventType</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a7a8311bdb049a796df8c60540a979ae6" compoundref="_log_writer_8cs" startline="42" endline="42">VolumeControl.Log.LogWriter.LastEventType</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1ac1a570a8d00bacba3a71dd8e442cfd31">VolumeControl.Log.LogWriter.MakeTimestamp</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a2358be752465f43b8ac7b0d7c2aa55bf" compoundref="_log_writer_8cs" startline="77" endline="116">VolumeControl.Log.LogWriter.WriteWithTimestamp</references>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a09e652d1c8049b4b137d45dd2a6466a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.Debug</definition>
        <argsstring>(params object?[] lines)</argsstring>
        <name>Debug</name>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Write a formatted EventType.DEBUG message to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of objects, each written on a new line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="203" column="21"/>
        <referencedby refid="class_volume_control_1_1_hotkeys_1_1_hotkey_manager_1a57c8d96dc5d4178d5b6d15a5df8fa374" compoundref="_hotkey_manager_8cs" startline="191" endline="197">VolumeControl.Hotkeys.HotkeyManager.AddHook</referencedby>
        <referencedby refid="class_volume_control_1_1_hotkeys_1_1_hotkey_manager_1a2109e5e62f1d469c63acc9c6fd832f61" compoundref="_hotkey_manager_8cs" startline="119" endline="138">VolumeControl.Hotkeys.HotkeyManager.LoadHotkeys</referencedby>
        <referencedby refid="class_volume_control_1_1_hotkeys_1_1_hotkey_manager_1a43f5e3e31ab161cd9e8701fe39d1114e" compoundref="_hotkey_manager_8cs" startline="201" endline="207">VolumeControl.Hotkeys.HotkeyManager.RemoveHook</referencedby>
        <referencedby refid="class_volume_control_1_1_hotkeys_1_1_hotkey_manager_1ad179564abe8e8dcf492a365cffdcad6c" compoundref="_hotkey_manager_8cs" startline="142" endline="158">VolumeControl.Hotkeys.HotkeyManager.SaveHotkeys</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1adf2532f0598cac3dfe9a3660f4fb7362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.Info</definition>
        <argsstring>(params object?[] lines)</argsstring>
        <name>Info</name>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Write a formatted EventType.INFO message to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of objects, each written on a new line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="208" column="21"/>
        <referencedby refid="class_volume_control_1_1_hotkeys_1_1_hotkey_manager_1ab9308e90e3fb6ef452aa7e17587c675b" compoundref="_hotkey_manager_8cs" startline="61" endline="66">VolumeControl.Hotkeys.HotkeyManager.AddHotkey</referencedby>
        <referencedby refid="class_volume_control_1_1_hotkeys_1_1_hotkey_manager_1a66277b242d576b541f7bffb1f570c214" compoundref="_hotkey_manager_8cs" startline="78" endline="84">VolumeControl.Hotkeys.HotkeyManager.DelHotkey</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a5caf611b6e4d2cf97b6521b9b2e3f9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.Warning</definition>
        <argsstring>(params object?[] lines)</argsstring>
        <name>Warning</name>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Write a formatted EventType.WARN message to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of objects, each written on a new line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="213" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1ae7780f22869e53ce4a1aad3fc6fa0bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.Error</definition>
        <argsstring>(params object?[] lines)</argsstring>
        <name>Error</name>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Write a formatted EventType.ERROR message to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of objects, each written on a new line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="218" column="21"/>
        <referencedby refid="class_volume_control_1_1_audio_1_1_audio_session_1aeb56d8f5f6a97fde371c4795473c1f7a" compoundref="_audio_session_8cs" startline="20" endline="35">VolumeControl.Audio.AudioSession.AudioSession</referencedby>
        <referencedby refid="class_volume_control_1_1_audio_1_1_audio_session_1a59a3626b8a1cde96c65a68b65d5182da" compoundref="_audio_session_8cs" startline="153" endline="164">VolumeControl.Audio.AudioSession.GetProcess</referencedby>
        <referencedby refid="class_volume_control_1_1_hotkeys_1_1_hotkey_manager_1a2109e5e62f1d469c63acc9c6fd832f61" compoundref="_hotkey_manager_8cs" startline="119" endline="138">VolumeControl.Hotkeys.HotkeyManager.LoadHotkeys</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1ad9e85777693f64428ffb3997aaa82571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.Fatal</definition>
        <argsstring>(params object?[] lines)</argsstring>
        <name>Fatal</name>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Write a formatted EventType.FATAL message to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of objects, each written on a new line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="223" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1aa45f631b6e36cd5dee9759993c36e862" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.WriteException</definition>
        <argsstring>(EventType ev, Exception exception, object? message=null)</argsstring>
        <name>WriteException</name>
        <param>
          <type><ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref></type>
          <declname>ev</declname>
        </param>
        <param>
          <type>Exception</type>
          <declname>exception</declname>
        </param>
        <param>
          <type>object?</type>
          <declname>message</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="229" column="21" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="229" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1afc5a989c76d93c1ed2ab93a0e51116bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.DebugException</definition>
        <argsstring>(Exception exception, object? message=null)</argsstring>
        <name>DebugException</name>
        <param>
          <type>Exception</type>
          <declname>exception</declname>
        </param>
        <param>
          <type>object?</type>
          <declname>message</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Write a formatted EventType.DEBUG exception message to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>The exception that was thrown.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional header message to use instead of the exception&apos;s message. <emphasis>(The exception message is still shown.)</emphasis></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="243" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1ae2133d1e8440194232ecb43e8a3dda4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.InfoException</definition>
        <argsstring>(Exception exception, object? message=null)</argsstring>
        <name>InfoException</name>
        <param>
          <type>Exception</type>
          <declname>exception</declname>
        </param>
        <param>
          <type>object?</type>
          <declname>message</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Write a formatted EventType.INFO exception message to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>The exception that was thrown.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional header message to use instead of the exception&apos;s message. <emphasis>(The exception message is still shown.)</emphasis></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="249" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a8bb1a18470c4e1146e570e48a42798fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.WarningException</definition>
        <argsstring>(Exception exception, object? message=null)</argsstring>
        <name>WarningException</name>
        <param>
          <type>Exception</type>
          <declname>exception</declname>
        </param>
        <param>
          <type>object?</type>
          <declname>message</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Write a formatted EventType.WARN exception message to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>The exception that was thrown.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional header message to use instead of the exception&apos;s message. <emphasis>(The exception message is still shown.)</emphasis></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="255" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a75e77a8720b36ca2c89eed22cf41cfdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.ErrorException</definition>
        <argsstring>(Exception exception, object? message=null)</argsstring>
        <name>ErrorException</name>
        <param>
          <type>Exception</type>
          <declname>exception</declname>
        </param>
        <param>
          <type>object?</type>
          <declname>message</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Write a formatted EventType.ERROR exception message to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>The exception that was thrown.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional header message to use instead of the exception&apos;s message. <emphasis>(The exception message is still shown.)</emphasis></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="261" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1addd47968ecd617ab467b61e55f72a1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.FatalException</definition>
        <argsstring>(Exception exception, object? message=null)</argsstring>
        <name>FatalException</name>
        <param>
          <type>Exception</type>
          <declname>exception</declname>
        </param>
        <param>
          <type>object?</type>
          <declname>message</declname>
          <defval>null</defval>
        </param>
        <briefdescription>
<para>Write a formatted EventType.FATAL exception message to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exception</parametername>
</parameternamelist>
<parameterdescription>
<para>The exception that was thrown.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional header message to use instead of the exception&apos;s message. <emphasis>(The exception message is still shown.)</emphasis></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="267" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a84f2a4a818ded391050345b3962adc90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.Append</definition>
        <argsstring>(params object?[] lines)</argsstring>
        <name>Append</name>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Appends the given lines to the log with a blank timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for writing quick follow-up messages that appear as if they were part of a previously written message.<linebreak/>
This function is unpredictable in multi-threaded environments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of writable objects. Each element appears on a separate line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="275" column="21" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="275" bodyend="280"/>
        <references refid="interface_volume_control_1_1_log_1_1_endpoints_1_1_i_endpoint_1a6912d3851cf42b2017d164c08d073c8e" compoundref="_i_endpoint_8cs" startline="11" endline="11">VolumeControl.Log.Endpoints.IEndpoint.Enabled</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a5ef26b1bf948c848e951921e8c2a5363" compoundref="_log_writer_8cs" startline="34" endline="34">VolumeControl.Log.LogWriter.Endpoint</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a41f1ff6d9d62eec9077a3c608ca36b5e">VolumeControl.Log.LogWriter.MakeBlankTimestamp</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a2358be752465f43b8ac7b0d7c2aa55bf" compoundref="_log_writer_8cs" startline="77" endline="116">VolumeControl.Log.LogWriter.WriteWithTimestamp</references>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a21c94de59ea2f83f2c8ad36f6e6b1280" compoundref="_log_writer_8cs" startline="293" endline="297">VolumeControl.Log.LogWriter.FollowupIf</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a71b504690e2d8f2d5a73755ff8b3ce50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.Followup</definition>
        <argsstring>(params object?[] lines)</argsstring>
        <name>Followup</name>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Write a formatted followup message without a timestamp or event type to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for writing quick follow-up messages that appear as if they were part of a previously written message.<linebreak/>
This function is unpredictable in multi-threaded environments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of writable objects. Each element appears on a separate line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="286" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a21c94de59ea2f83f2c8ad36f6e6b1280" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.FollowupIf</definition>
        <argsstring>(EventType eventType, params object?[] lines)</argsstring>
        <name>FollowupIf</name>
        <param>
          <type><ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref></type>
          <declname>eventType</declname>
        </param>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Write a formatted followup message without a timestamp or event type to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for writing quick follow-up messages that appear as if they were part of a previously written message.<linebreak/>
This function is unpredictable in multi-threaded environments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eventType</parametername>
</parameternamelist>
<parameterdescription>
<para>Message is only printed if this was the last event type to be printed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of writable objects. Each element appears on a separate line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="293" column="21" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="293" bodyend="297"/>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a84f2a4a818ded391050345b3962adc90" compoundref="_log_writer_8cs" startline="275" endline="280">VolumeControl.Log.LogWriter.Append</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a7a8311bdb049a796df8c60540a979ae6" compoundref="_log_writer_8cs" startline="42" endline="42">VolumeControl.Log.LogWriter.LastEventType</references>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a358d95abb387b01732c5657a3da421d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.FollowupIf</definition>
        <argsstring>(Predicate&lt; EventType &gt; predicate, params object?[] lines)</argsstring>
        <name>FollowupIf</name>
        <param>
          <type>Predicate&lt; <ref refid="namespace_volume_control_1_1_log_1_1_enum_1a3cd077137af59fc500ebf35ecfdc4327" kindref="member">EventType</ref> &gt;</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>params object?[]</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Write a formatted followup message without a timestamp or event type to the log endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended for writing quick follow-up messages that appear as if they were part of a previously written message.<linebreak/>
This function is unpredictable in multi-threaded environments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>A predicate that accepts the <ref refid="class_volume_control_1_1_log_1_1_log_writer_1a7a8311bdb049a796df8c60540a979ae6" kindref="member">LastEventType</ref> to use as the condition.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Any number of writable objects. Each element appears on a separate line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="304" column="21" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="304" bodyend="308"/>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a84f2a4a818ded391050345b3962adc90" compoundref="_log_writer_8cs" startline="275" endline="280">VolumeControl.Log.LogWriter.Append</references>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a7a8311bdb049a796df8c60540a979ae6" compoundref="_log_writer_8cs" startline="42" endline="42">VolumeControl.Log.LogWriter.LastEventType</references>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1ae5e6a321324c6111fc851f15a82e45dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VolumeControl.Log.LogWriter.Dispose</definition>
        <argsstring>()</argsstring>
        <name>Dispose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="325" column="21" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="325" bodyend="329"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a41f1ff6d9d62eec9077a3c608ca36b5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>static string VolumeControl.Log.LogWriter.MakeBlankTimestamp</definition>
        <argsstring>()</argsstring>
        <name>MakeBlankTimestamp</name>
        <briefdescription>
<para>Gets a blank timestamp to use as indentation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A string of the same length as a timestamp, filled entirely with space characters.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="49" column="30"/>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a84f2a4a818ded391050345b3962adc90" compoundref="_log_writer_8cs" startline="275" endline="280">VolumeControl.Log.LogWriter.Append</referencedby>
        <referencedby refid="class_volume_control_1_1_log_1_1_log_writer_1a2358be752465f43b8ac7b0d7c2aa55bf" compoundref="_log_writer_8cs" startline="77" endline="116">VolumeControl.Log.LogWriter.WriteWithTimestamp</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1a1a923e4492f98675dcedebc61ef0055a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>static string VolumeControl.Log.LogWriter.GetTrace</definition>
        <argsstring>([CallerMemberName] string callerMemberName=&quot;&quot;, [CallerFilePath] string callerFilePath=&quot;&quot;, [CallerLineNumber] int callerLineNumber=-1)</argsstring>
        <name>GetTrace</name>
        <param>
          <attributes>[CallerMemberName]</attributes>
          <type>string</type>
          <declname>callerMemberName</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <attributes>[CallerFilePath]</attributes>
          <type>string</type>
          <declname>callerFilePath</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <attributes>[CallerLineNumber]</attributes>
          <type>int</type>
          <declname>callerLineNumber</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Gets a stack trace message using attributes. </para>
        </briefdescription>
        <detaileddescription>
<para>Don&apos;t provide parameters.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="123" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_volume_control_1_1_log_1_1_log_writer_1ad15ebefc27f412e93bb25a211100d2af" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void VolumeControl.Log.LogWriter.Dispose</definition>
        <argsstring>(bool disposing)</argsstring>
        <name>Dispose</name>
        <param>
          <type>bool</type>
          <declname>disposing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="311" column="32" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="311" bodyend="322"/>
        <references refid="class_volume_control_1_1_log_1_1_log_writer_1a5ef26b1bf948c848e951921e8c2a5363" compoundref="_log_writer_8cs" startline="34" endline="34">VolumeControl.Log.LogWriter.Endpoint</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic log writer object. </para>
    </briefdescription>
    <detaileddescription>
<para>This does all of the heavy-lifting (string manipulation) for the <ref refid="namespace_volume_control_1_1_log" kindref="compound">Log</ref> namespace.</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>VolumeControl.Log.LogMessage</label>
        <link refid="class_volume_control_1_1_log_1_1_log_message"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>VolumeControl.Log.LogWriter</label>
        <link refid="class_volume_control_1_1_log_1_1_log_writer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>IDisposable</label>
      </node>
      <node id="2">
        <label>ILogWriter</label>
        <link refid="interface_volume_control_1_1_log_1_1_interfaces_1_1_i_log_writer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>VolumeControl.Log.LogWriter</label>
        <link refid="class_volume_control_1_1_log_1_1_log_writer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>IDisposable</label>
      </node>
      <node id="2">
        <label>ILogWriter</label>
        <link refid="interface_volume_control_1_1_log_1_1_interfaces_1_1_i_log_writer"/>
      </node>
    </collaborationgraph>
    <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" line="15" column="11" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Log/LogWriter.cs" bodystart="16" bodyend="331"/>
    <listofallmembers>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a84f2a4a818ded391050345b3962adc90" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Append</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a23589efc4aa886f386e9d8645338a395" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Conditional</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a09e652d1c8049b4b137d45dd2a6466a4" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Debug</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1afc5a989c76d93c1ed2ab93a0e51116bc" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>DebugException</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1ad15ebefc27f412e93bb25a211100d2af" prot="protected" virt="virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Dispose</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1ae5e6a321324c6111fc851f15a82e45dc" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Dispose</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a3251e29f0b5996a94eb8e509e9d0d5c9" prot="private" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>disposedValue</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a5ef26b1bf948c848e951921e8c2a5363" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Endpoint</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1ae7780f22869e53ce4a1aad3fc6fa0bf7" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Error</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a75e77a8720b36ca2c89eed22cf41cfdb" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>ErrorException</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a9ccdde45c27eeb86a0be3d706c97a050" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>EventTypeFilter</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1ad9e85777693f64428ffb3997aaa82571" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Fatal</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1addd47968ecd617ab467b61e55f72a1d7" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>FatalException</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a927e2b5b79ae2c3a0b243246bb2e5a3d" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>FilterEventType</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a71b504690e2d8f2d5a73755ff8b3ce50" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Followup</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a21c94de59ea2f83f2c8ad36f6e6b1280" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>FollowupIf</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a358d95abb387b01732c5657a3da421d3" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>FollowupIf</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a50ad257b3de9e7d97078463bee977514" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>GetMessage</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a1a923e4492f98675dcedebc61ef0055a" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>GetTrace</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1adf2532f0598cac3dfe9a3660f4fb7362" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Info</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1ae2133d1e8440194232ecb43e8a3dda4a" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>InfoException</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a7a8311bdb049a796df8c60540a979ae6" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>LastEventType</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1aecfc7d86fb35f9bb5e0803755f0040c8" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>LogWriter</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a41f1ff6d9d62eec9077a3c608ca36b5e" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>MakeBlankTimestamp</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1ac1a570a8d00bacba3a71dd8e442cfd31" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>MakeTimestamp</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a5caf611b6e4d2cf97b6521b9b2e3f9ef" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Warning</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a8bb1a18470c4e1146e570e48a42798fa" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>WarningException</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a06ef763c23a68f61dbd347e76098c151" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>Write</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1af9f117f9eb6d41820bc271ac0f0d4f76" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>WriteEvent</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a07d713ad2ef057e4606c04bdd6169c16" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>WriteEvent</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a10efb093dfb522f97b14188ee6a3fa5f" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>WriteEvent</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1aa45f631b6e36cd5dee9759993c36e862" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>WriteException</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1adcd0a07adf8acc7d797d10cbae69a11d" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>WriteLine</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a1945fc8f37b7d1b0b156693cd616ffb7" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>WriteMessage</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a2358be752465f43b8ac7b0d7c2aa55bf" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>WriteWithTimestamp</name></member>
      <member refid="class_volume_control_1_1_log_1_1_log_writer_1a817b4d25c9fcc86fa0b5afe28ec054b1" prot="public" virt="non-virtual"><scope>VolumeControl::Log::LogWriter</scope><name>WriteWithTimestamp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
