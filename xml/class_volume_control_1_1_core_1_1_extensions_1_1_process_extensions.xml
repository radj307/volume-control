<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions" kind="class" language="C#" prot="public">
    <compoundname>VolumeControl::Core::Extensions::ProcessExtensions</compoundname>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1ab2f9953a1a9e67eea829750fb644350b" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int VolumeControl.Core.Extensions.ProcessExtensions.PROCESS_QUERY_LIMITED_INFORMATION</definition>
        <argsstring></argsstring>
        <name>PROCESS_QUERY_LIMITED_INFORMATION</name>
        <initializer>= 4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" line="19" column="27" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1aff51d1612639024833aa4c6b7acb501a" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int VolumeControl.Core.Extensions.ProcessExtensions.SYNCHRONIZE</definition>
        <argsstring></argsstring>
        <name>SYNCHRONIZE</name>
        <initializer>= 1048576</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" line="20" column="27" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1a4a8e2423bfb23af78f2412adfe0c6124" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IntPtr</type>
        <definition>static IntPtr VolumeControl.Core.Extensions.ProcessExtensions.OpenProcess</definition>
        <argsstring>(int dwDesiredAccess, int bInheritHandle, int dwProcessId)</argsstring>
        <name>OpenProcess</name>
        <param>
          <type>int</type>
          <declname>dwDesiredAccess</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bInheritHandle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dwProcessId</declname>
        </param>
        <briefdescription>
<para>Opens an existing local process object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dwDesiredAccess</parametername>
</parameternamelist>
<parameterdescription>
<para>The access to the process object. This access right is checked against the security descriptor for the process. This parameter can be one or more of the process access rights.If the caller has enabled the SeDebugPrivilege privilege, the requested access is granted regardless of the contents of the security descriptor.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bInheritHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dwProcessId</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the local process to be opened.If the specified process is the System Idle Process(0x00000000), the function fails and the last error code is ERROR_INVALID_PARAMETER.If the specified process is the System process or one of the Client Server Run-Time Subsystem(CSRSS) processes, this function fails and the last error code is ERROR_ACCESS_DENIED because their access restrictions prevent user-level code from opening them.If you are using GetCurrentProcessId as an argument to this function, consider using GetCurrentProcess instead of OpenProcess, for improved performance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the function succeeds, the return value is an open handle to the specified process. If the function fails, the return value is NULL.To get extended error information, call GetLastError.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" line="17" column="38"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1a080bdb40a6e42d6d9a79bf7638995cc2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int VolumeControl.Core.Extensions.ProcessExtensions.GetProcessTimes</definition>
        <argsstring>(IntPtr hProcess, out long lpCreationTime, out long lpExitTime, out long lpKernelTime, out long lpUserTime)</argsstring>
        <name>GetProcessTimes</name>
        <param>
          <type>IntPtr</type>
          <declname>hProcess</declname>
        </param>
        <param>
          <type>out long</type>
          <declname>lpCreationTime</declname>
        </param>
        <param>
          <type>out long</type>
          <declname>lpExitTime</declname>
        </param>
        <param>
          <type>out long</type>
          <declname>lpKernelTime</declname>
        </param>
        <param>
          <type>out long</type>
          <declname>lpUserTime</declname>
        </param>
        <briefdescription>
<para>Retrieves timing information for the specified process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hProcess</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the process whose timing information is sought. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights.<linebreak/>
Windows Server 2003 and Windows XP: The handle must have the PROCESS_QUERY_INFORMATION access right.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lpCreationTime</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a FILETIME structure that receives the creation time of the process.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lpExitTime</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a FILETIME structure that receives the exit time of the process. If the process has not exited, the content of this structure is undefined.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lpKernelTime</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a FILETIME structure that receives the amount of time that the process has executed in kernel mode. The time that each of the threads of the process has executed in kernel mode is determined, and then all of those times are summed together to obtain this value.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lpUserTime</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a FILETIME structure that receives the amount of time that the process has executed in user mode. The time that each of the threads of the process has executed in user mode is determined, and then all of those times are summed together to obtain this value. Note that this value can exceed the amount of real time elapsed (between lpCreationTime and lpExitTime) if the process executes across multiple CPU cores.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the function succeeds, the return value is nonzero.<linebreak/>
If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" line="32" column="35"/>
      </memberdef>
      <memberdef kind="function" id="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1aabf70b6a4bf38a2d576190323c473499" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int VolumeControl.Core.Extensions.ProcessExtensions.CloseHandle</definition>
        <argsstring>(IntPtr hObject)</argsstring>
        <name>CloseHandle</name>
        <param>
          <type>IntPtr</type>
          <declname>hObject</declname>
        </param>
        <briefdescription>
<para>Closes an open object handle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If the function succeeds, the return value is nonzero.<linebreak/>
If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" line="59" column="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1ac105e14e55942a54bab183a55164fa72" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void VolumeControl.Core.Extensions.ProcessExtensions.GetProcessTimes</definition>
        <argsstring>(IntPtr hProcess, out DateTime? creationTime, out DateTime? exitTime, out DateTime? kernelTime, out DateTime? userTime)</argsstring>
        <name>GetProcessTimes</name>
        <param>
          <type>IntPtr</type>
          <declname>hProcess</declname>
        </param>
        <param>
          <type>out DateTime?</type>
          <declname>creationTime</declname>
        </param>
        <param>
          <type>out DateTime?</type>
          <declname>exitTime</declname>
        </param>
        <param>
          <type>out DateTime?</type>
          <declname>kernelTime</declname>
        </param>
        <param>
          <type>out DateTime?</type>
          <declname>userTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>creationTime</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a FILETIME structure that receives the creation time of the process.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exitTime</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a FILETIME structure that receives the exit time of the process. If the process has not exited, the content of this structure is undefined.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernelTime</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a FILETIME structure that receives the amount of time that the process has executed in kernel mode. The time that each of the threads of the process has executed in kernel mode is determined, and then all of those times are summed together to obtain this value.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userTime</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a FILETIME structure that receives the amount of time that the process has executed in user mode. The time that each of the threads of the process has executed in user mode is determined, and then all of those times are summed together to obtain this value. Note that this value can exceed the amount of real time elapsed (between <emphasis>creationTime</emphasis>  and <emphasis>exitTime</emphasis> ) if the process executes across multiple CPU cores.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" line="38" column="29" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" bodystart="38" bodyend="52"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1a85d8ca3e21a1bd93193e5299872b1173" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool VolumeControl.Core.Extensions.ProcessExtensions.HasExited</definition>
        <argsstring>(this Process p)</argsstring>
        <name>HasExited</name>
        <param>
          <type>this Process</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>This fixes a bug that microsoft hasn&apos;t fixed since at least Windows Vista that occurs when calling Process.HasExited.<linebreak/>
 <bold>DO NOT USE THE Process.HasExited PROPERTY, USE THIS INSTEAD!</bold> </para>
        </briefdescription>
        <detaileddescription>
<para>Sources:<linebreak/>
 <ulink url="https://www.giorgi.dev/net/access-denied-process-bugs/">https://www.giorgi.dev/net/access-denied-process-bugs/</ulink> <linebreak/>
 <ulink url="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess">https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess</ulink> <linebreak/>
 <ulink url="https://docs.microsoft.com/en-ca/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocesstimes">https://docs.microsoft.com/en-ca/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocesstimes</ulink> <linebreak/>
 <ulink url="https://docs.microsoft.com/en-us/windows/win32/api/handleapi/nf-handleapi-closehandle">https://docs.microsoft.com/en-us/windows/win32/api/handleapi/nf-handleapi-closehandle</ulink> <linebreak/>
 </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Process instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the process has exited, false if the process is still running.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" line="73" column="28" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" bodystart="73" bodyend="83"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Extension methods for the Process class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>VolumeControl.Core.Extensions.ProcessExtensions</label>
        <link refid="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions"/>
      </node>
    </collaborationgraph>
    <location file="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" line="9" column="19" bodyfile="X:/_Workspace/_repo/volume-control-3/VolumeControl.Core/Extensions/ProcessExtensions.cs" bodystart="10" bodyend="84"/>
    <listofallmembers>
      <member refid="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1aabf70b6a4bf38a2d576190323c473499" prot="private" virt="non-virtual"><scope>VolumeControl::Core::Extensions::ProcessExtensions</scope><name>CloseHandle</name></member>
      <member refid="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1a080bdb40a6e42d6d9a79bf7638995cc2" prot="private" virt="non-virtual"><scope>VolumeControl::Core::Extensions::ProcessExtensions</scope><name>GetProcessTimes</name></member>
      <member refid="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1ac105e14e55942a54bab183a55164fa72" prot="private" virt="non-virtual"><scope>VolumeControl::Core::Extensions::ProcessExtensions</scope><name>GetProcessTimes</name></member>
      <member refid="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1a85d8ca3e21a1bd93193e5299872b1173" prot="public" virt="non-virtual"><scope>VolumeControl::Core::Extensions::ProcessExtensions</scope><name>HasExited</name></member>
      <member refid="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1a4a8e2423bfb23af78f2412adfe0c6124" prot="private" virt="non-virtual"><scope>VolumeControl::Core::Extensions::ProcessExtensions</scope><name>OpenProcess</name></member>
      <member refid="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1ab2f9953a1a9e67eea829750fb644350b" prot="private" virt="non-virtual"><scope>VolumeControl::Core::Extensions::ProcessExtensions</scope><name>PROCESS_QUERY_LIMITED_INFORMATION</name></member>
      <member refid="class_volume_control_1_1_core_1_1_extensions_1_1_process_extensions_1aff51d1612639024833aa4c6b7acb501a" prot="private" virt="non-virtual"><scope>VolumeControl::Core::Extensions::ProcessExtensions</scope><name>SYNCHRONIZE</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
