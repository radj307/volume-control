name: Generate Release

on:
  push:
    tags: '*.*.*'
  workflow_dispatch:
    inputs:
      name:
        description:  'Release Name'
        required:     false
        default:      ''
        type:         string
      tag: # Target tag to make a release for
        description:  'Release Tag'
        required:     false
        default:      ''
        type:         string
      is-draft: # Input that selects whether to make a draft release or a public release
        description:  'Make Draft Release'
        required:     false
        default:      'true'
        type:         boolean
      is-prerelease: # Input that selects whether to make a pre-release or normal release
        description:  'Make Pre-Release'
        required:     false
        default:      'false'
        type:         boolean
      autogenerate:
        description:  'Autogenerate Release Notes From Commits'
        required:     false
        default:      'false'
        type:         boolean
      body:
        description:  'Release Body Paragraph'
        required:     false
        default:      ''
        
jobs:
  build-release:
    runs-on: windows-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth:  0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - name: Setup Dotnet
      uses: actions/setup-dotnet@main
      
    - name: Publish VolumeControl Release to Directory
      run:  dotnet publish VolumeControl -c Release /p:PublishProfile="VolumeControl/Properties/PublishProfiles/FolderProfile.pubxml"
      
    - name: Publish VolumeControlCLI Release to Directory
      run:  dotnet publish VolumeControlCLI -c Release /p:PublishProfile="VolumeControlCLI/Properties/PublishProfiles/FolderProfile.pubxml"
      
    - name:   Get Release Tag
      id:     get_version
      run:    |
              $TAG=${GITHUB_REF/refs\/tags\//}
              $TAG=$(if("$TAG" -eq "") { echo "${{github.event.inputs.tag}}" } else { echo $TAG })
              echo ::set-output name=TAG::"$TAG"
      shell:  powershell
      
    - name:   Stage Files
      run:    |
              mkdir "${{github.workspace}}/STAGING"
              cd "${{github.workspace}}/STAGING"
              foreach($file in $((dir "${{github.workspace}}/publish" -recurse | where {$_.extension -in ".exe",".dll"}).Fullname)){ mv $file ./ }
              Compress-Archive ./* "VolumeControl-${{steps.get_version.outputs.TAG}}.zip"
              mv "./*.zip" "${{github.workspace}}"
              
    - name:   Upload Artifact
      uses:   actions/upload-artifact@v2
      with:
        name: build-windows
        path: "${{github.workspace}}/VolumeControl*.zip"
        
        
        
  # Use linux to create the release because windows is FUCKING BROKEN
  create-release:
    needs:    build-release
    runs-on:  ubuntu-latest
    
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: build-windows
        
    - run:  ls -lAghR
    
    - name: '(Dispatch) Create Release'
      uses: softprops/action-gh-release@v1
      with:
        draft:                    ${{ github.event.inputs.is-draft || true }}
        prerelease:               ${{ github.event.inputs.is-prerelease || false }}
        tag_name:                 ${{ steps.get_version.outputs.VERSION }}
        name:                     ${{ steps.get_version.outputs.NAME }}
        generate_release_notes:   ${{ github.event.inputs.autogenerate || true }}
        body:                     ${{ github.event.inputs.body || '' }}
        fail_on_unmatched_files:  true
        files:                    ${{github.workspace}}/*.zip
